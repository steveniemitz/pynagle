from .core import Scales

class BaseBuilder(object):
  """Base builder helper class for Scales services.

  Builder wrap creating a client for a specific service type.
  This includes configuring sinks, setting a timeout, etc.
  """
  DEFAULT_TIMEOUT = 10

  class SinkProviderProvider(object):
    _PROVIDERS = []

    def CreateProvider(self):
      providers = [p() for p in self._PROVIDERS]
      for n, p in enumerate(providers[:-1]):
        p.next_provider = providers[n+1]
      return providers[0]

  def _GetSinkProvider(self):
    return self.SinkProviderProvider()

  def Configure(self, Iface):
    """Configure a Scales client for the given interface.

    Args:
      Iface - The interface to build a scales client for.

    Returns:
      A scales builder configured for the service.
    """
    return Scales \
      .NewBuilder(Iface) \
      .SetSinkProvider(self._GetSinkProvider())

  @classmethod
  def NewClient(cls, Iface, uri, timeout=DEFAULT_TIMEOUT):
    """Create a new client for a Thrift service.

    Args:
      Iface - The Thrift interface (generated by the thrift compiler.)
      uri - The URI of the service.  Uri may be in the form of
            "tcp://host:port,host:port,...", or "zk://host:port/server/set/path".
      timeout - The default call timeout.
    Returns:
      A proxy implementing all thrift methods of Iface.
    """
    return cls().Configure(Iface) \
      .SetUri(uri) \
      .SetTimeout(timeout) \
      .Build()
